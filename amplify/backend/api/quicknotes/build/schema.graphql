type Note {
  id: ID!
  title: String!
  text: String!
  createdAt: String
  updatedAt: String
  owner: String
}

type Post {
  id: ID!
  title: String!
  content: String!
  hidden: Boolean
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  author: User
  owner: String
}

type Comment {
  id: ID!
  content: String
  post: Post
  author: User
  owner: String
}

type User {
  id: ID!
  name: String!
  description: String
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  calendarEntries(filter: ModelCalendarEntryFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCalendarEntryConnection
  privateData: UserPrivateData
  owner: String
}

type UserPrivateData {
  id: ID!
  email: String
  user: User
  owner: String
}

type CalendarEntry {
  id: ID!
  startDate: Int!
  endDate: Int
  repeating: CalendarRepeatingType!
  repeatingDays: [Int]
  repeatingDates: [Int]
  ownerDetails: User
  privateData: CalendarEntryPrivateData
  owner: String
}

type CalendarEntryPrivateData {
  id: ID!
  name: String
  description: String
  calendarEntry: CalendarEntry
  owner: String
}

enum CalendarRepeatingType {
  NONE
  DAY
  DATE
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelNoteConnection {
  items: [Note]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelNoteFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  text: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
  and: [ModelNoteFilterInput]
  or: [ModelNoteFilterInput]
  not: ModelNoteFilterInput
}

type Query {
  getNote(id: ID!): Note
  listNotes(filter: ModelNoteFilterInput, limit: Int, nextToken: String): ModelNoteConnection
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getUserPrivateData(id: ID!): UserPrivateData
  listUserPrivateDatas(filter: ModelUserPrivateDataFilterInput, limit: Int, nextToken: String): ModelUserPrivateDataConnection
  getCalendarEntry(id: ID!): CalendarEntry
  listCalendarEntrys(filter: ModelCalendarEntryFilterInput, limit: Int, nextToken: String): ModelCalendarEntryConnection
  getCalendarEntryPrivateData(id: ID!): CalendarEntryPrivateData
  listCalendarEntryPrivateDatas(filter: ModelCalendarEntryPrivateDataFilterInput, limit: Int, nextToken: String): ModelCalendarEntryPrivateDataConnection
}

input CreateNoteInput {
  id: ID
  title: String!
  text: String!
  createdAt: String
  updatedAt: String
  owner: String
}

input UpdateNoteInput {
  id: ID!
  title: String
  text: String
  createdAt: String
  updatedAt: String
  owner: String
}

input DeleteNoteInput {
  id: ID
}

type Mutation {
  createNote(input: CreateNoteInput!, condition: ModelNoteConditionInput): Note
  updateNote(input: UpdateNoteInput!, condition: ModelNoteConditionInput): Note
  deleteNote(input: DeleteNoteInput!, condition: ModelNoteConditionInput): Note
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createUserPrivateData(input: CreateUserPrivateDataInput!, condition: ModelUserPrivateDataConditionInput): UserPrivateData
  updateUserPrivateData(input: UpdateUserPrivateDataInput!, condition: ModelUserPrivateDataConditionInput): UserPrivateData
  deleteUserPrivateData(input: DeleteUserPrivateDataInput!, condition: ModelUserPrivateDataConditionInput): UserPrivateData
  createCalendarEntry(input: CreateCalendarEntryInput!, condition: ModelCalendarEntryConditionInput): CalendarEntry
  updateCalendarEntry(input: UpdateCalendarEntryInput!, condition: ModelCalendarEntryConditionInput): CalendarEntry
  deleteCalendarEntry(input: DeleteCalendarEntryInput!, condition: ModelCalendarEntryConditionInput): CalendarEntry
  createCalendarEntryPrivateData(input: CreateCalendarEntryPrivateDataInput!, condition: ModelCalendarEntryPrivateDataConditionInput): CalendarEntryPrivateData
  updateCalendarEntryPrivateData(input: UpdateCalendarEntryPrivateDataInput!, condition: ModelCalendarEntryPrivateDataConditionInput): CalendarEntryPrivateData
  deleteCalendarEntryPrivateData(input: DeleteCalendarEntryPrivateDataInput!, condition: ModelCalendarEntryPrivateDataConditionInput): CalendarEntryPrivateData
}

input ModelNoteConditionInput {
  title: ModelStringInput
  text: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
  and: [ModelNoteConditionInput]
  or: [ModelNoteConditionInput]
  not: ModelNoteConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateNote: Note @aws_subscribe(mutations: ["createNote"])
  onUpdateNote: Note @aws_subscribe(mutations: ["updateNote"])
  onDeleteNote: Note @aws_subscribe(mutations: ["deleteNote"])
  onCreatePost(owner: String!): Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost(owner: String!): Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost(owner: String!): Post @aws_subscribe(mutations: ["deletePost"])
  onCreateComment(owner: String!): Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment(owner: String!): Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment(owner: String!): Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateUser(owner: String!): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(owner: String!): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(owner: String!): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateUserPrivateData(owner: String!): UserPrivateData @aws_subscribe(mutations: ["createUserPrivateData"])
  onUpdateUserPrivateData(owner: String!): UserPrivateData @aws_subscribe(mutations: ["updateUserPrivateData"])
  onDeleteUserPrivateData(owner: String!): UserPrivateData @aws_subscribe(mutations: ["deleteUserPrivateData"])
  onCreateCalendarEntry(owner: String!): CalendarEntry @aws_subscribe(mutations: ["createCalendarEntry"])
  onUpdateCalendarEntry(owner: String!): CalendarEntry @aws_subscribe(mutations: ["updateCalendarEntry"])
  onDeleteCalendarEntry(owner: String!): CalendarEntry @aws_subscribe(mutations: ["deleteCalendarEntry"])
  onCreateCalendarEntryPrivateData(owner: String!): CalendarEntryPrivateData @aws_subscribe(mutations: ["createCalendarEntryPrivateData"])
  onUpdateCalendarEntryPrivateData(owner: String!): CalendarEntryPrivateData @aws_subscribe(mutations: ["updateCalendarEntryPrivateData"])
  onDeleteCalendarEntryPrivateData(owner: String!): CalendarEntryPrivateData @aws_subscribe(mutations: ["deleteCalendarEntryPrivateData"])
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  content: ModelStringInput
  hidden: ModelBooleanInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input CreatePostInput {
  id: ID
  title: String!
  content: String!
  hidden: Boolean
  postAuthorId: ID
}

input UpdatePostInput {
  id: ID!
  title: String
  content: String
  hidden: Boolean
  postAuthorId: ID
}

input DeletePostInput {
  id: ID
}

input ModelPostConditionInput {
  title: ModelStringInput
  content: ModelStringInput
  hidden: ModelBooleanInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  content: String
  commentPostId: ID
  commentAuthorId: ID
}

input UpdateCommentInput {
  id: ID!
  content: String
  commentPostId: ID
  commentAuthorId: ID
}

input DeleteCommentInput {
  id: ID
}

input ModelCommentConditionInput {
  content: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  name: String!
  description: String
  userPrivateDataId: ID
}

input UpdateUserInput {
  id: ID!
  name: String
  description: String
  userPrivateDataId: ID
}

input DeleteUserInput {
  id: ID
}

input ModelUserConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type ModelUserPrivateDataConnection {
  items: [UserPrivateData]
  nextToken: String
}

input ModelUserPrivateDataFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  and: [ModelUserPrivateDataFilterInput]
  or: [ModelUserPrivateDataFilterInput]
  not: ModelUserPrivateDataFilterInput
}

input CreateUserPrivateDataInput {
  id: ID
  email: String
  userPrivateDataUserId: ID
}

input UpdateUserPrivateDataInput {
  id: ID!
  email: String
  userPrivateDataUserId: ID
}

input DeleteUserPrivateDataInput {
  id: ID
}

input ModelUserPrivateDataConditionInput {
  email: ModelStringInput
  and: [ModelUserPrivateDataConditionInput]
  or: [ModelUserPrivateDataConditionInput]
  not: ModelUserPrivateDataConditionInput
}

type ModelCalendarEntryConnection {
  items: [CalendarEntry]
  nextToken: String
}

input ModelCalendarRepeatingTypeInput {
  eq: CalendarRepeatingType
  ne: CalendarRepeatingType
}

input ModelCalendarEntryFilterInput {
  id: ModelIDInput
  startDate: ModelIntInput
  endDate: ModelIntInput
  repeating: ModelCalendarRepeatingTypeInput
  repeatingDays: ModelIntInput
  repeatingDates: ModelIntInput
  and: [ModelCalendarEntryFilterInput]
  or: [ModelCalendarEntryFilterInput]
  not: ModelCalendarEntryFilterInput
}

input CreateCalendarEntryInput {
  id: ID
  startDate: Int!
  endDate: Int
  repeating: CalendarRepeatingType!
  repeatingDays: [Int]
  repeatingDates: [Int]
  calendarEntryOwnerDetailsId: ID
  calendarEntryPrivateDataId: ID
}

input UpdateCalendarEntryInput {
  id: ID!
  startDate: Int
  endDate: Int
  repeating: CalendarRepeatingType
  repeatingDays: [Int]
  repeatingDates: [Int]
  calendarEntryOwnerDetailsId: ID
  calendarEntryPrivateDataId: ID
}

input DeleteCalendarEntryInput {
  id: ID
}

input ModelCalendarEntryConditionInput {
  startDate: ModelIntInput
  endDate: ModelIntInput
  repeating: ModelCalendarRepeatingTypeInput
  repeatingDays: ModelIntInput
  repeatingDates: ModelIntInput
  and: [ModelCalendarEntryConditionInput]
  or: [ModelCalendarEntryConditionInput]
  not: ModelCalendarEntryConditionInput
}

type ModelCalendarEntryPrivateDataConnection {
  items: [CalendarEntryPrivateData]
  nextToken: String
}

input ModelCalendarEntryPrivateDataFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelCalendarEntryPrivateDataFilterInput]
  or: [ModelCalendarEntryPrivateDataFilterInput]
  not: ModelCalendarEntryPrivateDataFilterInput
}

input CreateCalendarEntryPrivateDataInput {
  id: ID
  name: String
  description: String
  calendarEntryPrivateDataCalendarEntryId: ID
}

input UpdateCalendarEntryPrivateDataInput {
  id: ID!
  name: String
  description: String
  calendarEntryPrivateDataCalendarEntryId: ID
}

input DeleteCalendarEntryPrivateDataInput {
  id: ID
}

input ModelCalendarEntryPrivateDataConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelCalendarEntryPrivateDataConditionInput]
  or: [ModelCalendarEntryPrivateDataConditionInput]
  not: ModelCalendarEntryPrivateDataConditionInput
}
